#+BEGIN_COMMENT
.. title: Trax Hello World
.. slug: trax-hello-world
.. date: 2021-02-19 17:29:37 UTC-08:00
.. tags: trax,basics,linear regression
.. category: 
.. link: 
.. description: 
.. type: text
.. status: 
.. updated: 
.. has_math: True
#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3
#+PROPERTY: header-args :session ~/.local/share/jupyter/runtime/kernel-928c7f5b-7df2-4910-afe5-92a6f4748ec8-ssh.json
#+BEGIN_SRC python :results none :exports none
%load_ext autoreload
%autoreload 2
#+END_SRC
* Beginning
  This 'Hello World' takes data created by a simple linear model and trains a neural network to model it. The actual model will take this form:

\[
y = mx + b
\]

Where /m/ is the slope and /b/ is the y-intercept. In statistics this is sometimes written using betas:

\[
y = \beta_0 + \beta_1 x
\]

And in machine learning it's sometimes written with weights:

\[
y = w_0 + w_1 x
\]

Or with a bias and a weight:

\[
y = bias + w_0 x
\]
** Imports
*** Trax Imports
    Since this is about trax I'll separate out the imports to make it more obvious.
#+begin_src python :results none
from trax import layers
from trax.supervised import training

import trax
#+end_src
*** Not-Trax
    The rest of this is just to support the data creation, plotting, etc.

#+begin_src python :results none
# python
from collections import namedtuple
from functools import partial
from pathlib import Path
from tempfile import TemporaryFile

import random
import shutil
import sys

# pypi
from holoviews import opts
from sklearn.metrics import r2_score

import holoviews
import hvplot.pandas
import numpy
import pandas
import statsmodels.api as statsmodels

# my stuff
from graeae import EmbedHoloviews
#+end_src
** Set Up
*** The Random Generator
    This is the newer (to me) way to generate random numbers with numpy.
    
    See: [[https://numpy.org/doc/stable/reference/random/generator.html#numpy.random.default_rng][numpy.random.default_rng]]

#+begin_src python :results none
random_generator = numpy.random.default_rng(seed=2021)
#+end_src
*** The Plotting
    Just some helpers for later on when I do some plotting.

#+begin_src python :results none
slug = "trax-hello-world"
Embed = partial(EmbedHoloviews, folder_path=f"files/posts/trax/{slug}")

Plot = namedtuple("Plot", ["width", "height", "fontscale", "tan", "blue", "red"])
PLOT = Plot(
    width=900,
    height=750,
    fontscale=2,
    tan="#ddb377",
    blue="#4687b7",
    red="#ce7b6d",
 )
#+end_src
* The Linear Regression
** The Data
   Trax is pretty invested in using generators, but I also want to be able to plot it, so rather than just generate the data on the fly I'll create a numpy array and then generate the data from it.

*** Sample
    See:
     - [[https://numpy.org/devdocs/reference/random/generated/numpy.random.Generator.standard_normal.html?highlight=standard_normal#numpy.random.Generator.standard_normal][numpy.random.Generator.standard_normal]]
     - [[https://numpy.org/devdocs/reference/random/generated/numpy.random.Generator.random.html?highlight=random#numpy.random.Generator.random][numpy.random.Generator.random]]

#+begin_src python :results none
def sample(start: float, stop: float, shape: tuple, uniform: bool=True) -> numpy.ndarray:
    """Create a random sample

    Args:
     start: lowest allowed value
     stop: highest allowed value
     shape: shape for the final array (just an int for single values)
     uniform: use the uniform distribution instead of the standard normal
    """
    if uniform:
        return (stop - start) * random_generator.random(shape) + start
    return (stop - start) * random_generator.standard_normal(shape) + start
#+end_src
*** The Samples
He're I'll make the linear-ish data with some noise added to it.

#+begin_src python :results none
SAMPLES = 200
X_RANGE = 5
x_values = sample(-X_RANGE, X_RANGE, SAMPLES)
SLOPE = sample(-5, 5, 1)
INTERCEPT = sample(-5, 5, 1)
noise = sample(-2, 2, SAMPLES, uniform=False)
y_values = SLOPE * x_values + INTERCEPT + noise
#+end_src

*** Plotting the Data
#+begin_src python :results none
data_frame = pandas.DataFrame.from_dict(dict(X=x_values, Y=y_values))
first, last = x_values.min(), x_values.max()
line_frame = pandas.DataFrame.from_dict(
    dict(X=[first, last],
         Y=[slope * first + intercept,
            slope * last + intercept]))
line_plot = line_frame.hvplot(x="X", y="Y", color=PLOT.blue)
data_plot = data_frame.hvplot.scatter(x="X", y="Y", title="Sample Data", color=PLOT.tan)
plot = (data_plot * line_plot).opts(
    height=PLOT.height,
    width=PLOT.width,
    fontscale=PLOT.fontscale
)
output = Embed(plot=plot, file_name="data_sample")()
#+end_src

#+begin_src python :results output html :exports output
print(output)
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="data_sample.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export
*** Data Generator
    This will generate the data for the trax batch generator.
    
#+begin_src python :results none
def linear_generator(x: numpy.ndarray, y: numpy.ndarray) -> tuple:
    """Generator of linear data

    Args:
     x: vector of input data
     y: vector of output data

    Yields:
     (x, y): single instance of x and single instance of y
    """
    total = len(x)
    assert x.shape == y.shape
    index = 0
    while True:
        yield (numpy.array([x[index]]), numpy.array([y[index]]))
        index = index % total
    return
#+end_src

#+begin_src python :results output :exports both
generator = linear_generator(x_values, y_values)
print(next(generator))
#+end_src

#+RESULTS:
: (array([2.56947828]), array([10.52443023]))
*** The Data Pipeline
    - [[https://trax-ml.readthedocs.io/en/latest/trax.data.html#trax.data.inputs.Serial][trax.data.Serial]]    
    - [[https://trax-ml.readthedocs.io/en/latest/trax.data.html#trax.data.inputs.Batch][trax.data.batch]]
    - [[https://trax-ml.readthedocs.io/en/latest/trax.data.html#trax.data.inputs.AddLossWeights][trax.data.AddLossWeights]]

#+begin_src python :results none
data_pipeline = trax.data.Serial(trax.data.Batch(50), trax.data.AddLossWeights(),)
data_stream = data_pipeline(generator)
#+end_src
** The Model
   - [[https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.combinators.Serial][trax.layers.Serial]]
   - [[https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.core.Dense][trax.layers.Dense]]
#+begin_src python :results none
model = layers.Serial(layers.Dense(1))
#+end_src
** Train the Model
   We're going to train the model using [[https://en.wikipedia.org/wiki/Stochastic_gradient_descent][Stochastic Gradient Descent]] with L2 Loss as a metric.

*** Set It Up   
   - [[https://trax-ml.readthedocs.io/en/latest/trax.layers.html#trax.layers.metrics.L2Loss][trax.layers.L2Loss]]
   - [[https://trax-ml.readthedocs.io/en/latest/trax.optimizers.html#trax.optimizers.base.SGD][trax.optimizers.SGD]]
     
The online documentation doesn't cover the =TrainTask= and =EvalTask=, for some reason.

#+begin_src python :results none
train_task = training.TrainTask(
    labeled_data=data_stream,
    loss_layer=layers.L2Loss(),
    optimizer=trax.optimizers.SGD(0.01),
    n_steps_per_checkpoint=10,
)

eval_task = training.EvalTask(
    labeled_data=data_stream, metrics=[layers.L2Loss()],
    n_eval_batches=10,
)
#+end_src
*** Run the Training
    - [[https://trax-ml.readthedocs.io/en/latest/trax.supervised.html#trax.supervised.training.Loop][trax.supervised.training.Loop]]
    - [[https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile][tempfile.TemporaryFile]]
    - [[https://docs.python.org/3/library/pathlib.html#pathlib.Path][pathlib.Path]]
    - [[https://docs.python.org/3/library/sys.html][sys]]

I use the =TemporaryFile= because I can't figure out how to prevent the training loop printing to standard out and making this file way too long.

#+begin_src python :results output :exports both
TRAIN_STEPS = 200
path = Path("~/models/linear_model").expanduser()
if path.exists():
    shutil.rmtree(path)

training_loop = training.Loop(
    model, train_task, eval_tasks=[eval_task], output_dir=path
)

real_stdout = sys.stdout
with TemporaryFile("w") as temp_file:
    sys.stdout = temp_file
    training_loop.run(TRAIN_STEPS)
    sys.stdout = real_stdout
#+end_src    

#+RESULTS:
** Plotting the Loss
#+begin_src python :results none
frame = pandas.DataFrame(training_loop.history.get("eval", "metrics/L2Loss"),
                         columns=["Batch", "L2 Loss"])

minimum = frame.loc[frame["L2 Loss"].idxmin()]
vline = holoviews.VLine(minimum.Batch).opts(opts.VLine(color=PLOT.red))
hline = holoviews.HLine(minimum["L2 Loss"]).opts(opts.HLine(color=PLOT.red))
line = frame.hvplot(x="Batch", y="L2 Loss").opts(opts.Curve(color=PLOT.blue))

plot = (line * hline * vline).opts(
    width=PLOT.width, height=PLOT.height,
    title="Evaluation Batch L2 Loss",
                                   )
output = Embed(plot=plot, file_name="evaluation_l2_loss")()
#+end_src

#+begin_src python :results output html :exports output
print(output)
#+end_src

#+RESULTS:
#+begin_export html
<object type="text/html" data="evaluation_l2_loss.html" style="width:100%" height=800>
  <p>Figure Missing</p>
</object>
#+end_export

It looks like it fits pretty quickly.
** Statsmodels Model
   As a comparison, I'll fit a statsmodels Ordinary Least Squares.
   See:  [[https://www.statsmodels.org/devel/generated/statsmodels.regression.linear_model.OLS.html][statsmodels.regression.linear_model.OLS]]
   
#+begin_src python :results none
x_stats = statsmodels.add_constant(x_values)
ols_model = statsmodels.OLS(y_values, x_stats)
regression = ols_model.fit()

regression_predictions = regression.predict(x_stats)
#+end_src
   
** Plotting the Model
   When we make a prediction, the x-values have to be a matrix, not a vector. So in this case we want one column with all the rows in it which you can get using reshape.

   See: [[https://numpy.org/doc/stable/reference/generated/numpy.reshape.html][numpy.reshape]]

One way to do this would be te pass in the length of the vector as the number of rows.

#+begin_example python
x_values.reshape(len(x_values), 1)
#+end_example

But the convention seems to be to use =-1= instead of the number of rows.

#+begin_example python
x_values.reshape(-1, 1)
#+end_example

Which is cleaner, if not as obvious in meaning.

#+begin_src python :results none
ALL_ROWS, ONE_COLUMN = -1, 1
TWO_DIMENSIONS = (ALL_ROWS, ONE_COLUMN)

predictions = model(x_values.reshape(TWO_DIMENSIONS))
data_frame["Predicted"] = predictions[:, 0]
data_frame["OLS"] = regression_predictions
#+end_src

#+begin_src python :results none
actual = data_frame.hvplot.scatter(x="X", y="Y", color=PLOT.tan, label="Data")
predicted = data_frame.hvplot.scatter(x="X", y="Predicted", color=PLOT.red, label="Predicted")
line_plot = line_frame.hvplot(x="X", y="Y", color=PLOT.blue, label="Actual")
ols_plot = data_frame.hvplot(x="X", y="OLS", label="OLS")
plot = (actual * predicted * line_plot * ols_plot).opts(
    height=PLOT.height,
    width=PLOT.width,
    fontscale=PLOT.fontscale
)
output = Embed(plot=plot, file_name="predictions")()
#+end_src

#+begin_src python :results output html :exports output
print(output)
#+end_src

#+RESULTS:
#+begin_export html
 <object type="text/html" data="predictions.html" style="width:100%" height=800>
   <p>Figure Missing</p>
 </object>
#+end_export
** Looking at \(R^2\)
   SKLearn has an [[https://scikit-learn.org/stable/modules/generated/sklearn.metrics.r2_score.html][~r2_score~]] function to calculate \(R^2\) for us.
   
#+begin_src python :results output :exports both
print(f"OLS R2: {r2_score(y_values, regression_predictions): 0.3f}")
print(f"Trax R2: {r2_score(y_values, predictions): 0.3f}")
#+end_src   

#+RESULTS:
: OLS R2:  0.926
: Trax R2:  0.724

An \(R^2\) of 1 means our model is a strong fit and an \(R^2\) of 0 means it doesn't fit at all. It looks like the Neural Network linear model didn't do so great compared to Ordinary Least Squares, although looking at the line I would have guessed that it did even worse.

** Parameters
Let's look at the found parameters.

#+begin_src python :results output :exports both
print("|Model| Slope |y-intercept |")
print("|-+-+-|")
print(f"|Actual| {SLOPE[0]:0.2f}| {INTERCEPT[0]:0.2f}|")
intercept, slope = regression.params
print(f"|OLS| {slope: 0.2f}|{intercept: 0.2f}|")

slope, intercept = model.weights[0]
print(f"| Trax|{float(slope): 0.2f} | {float(intercept):0.2f}|")
#+end_src

| Model  | Slope | y-intercept |
|--------+-------+-------------|
| Actual |  4.97 |       -2.45 |
| OLS    |  4.91 |       -4.09 |
| Trax   |  3.66 |        1.12 |

The OLS got the slope pretty close , but not so much the y-intercept, while trax was further off for both.

* End  
  - The trax code was taken from an example notebook in their [[https://github.com/thoo/trax-tutorial/blob/master/basic_regression_tensorboard.ipynb][Github Repository]].
